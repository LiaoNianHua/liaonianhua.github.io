## JavaScript 正则表达式

正则表达式是构成==搜索模式的字符序列==, 该搜索模式可用于文本搜索和文本替换操作。


```
正则表达式的两种形式:

1. 直接量语法 => /pattern/attributes
2. 创建RegExp对象的语法 => new RegExp(pattern, attributes)

=> 参数 pattern 是一个字符串，指定了正则表达式的模式或其他正则表达式
=> attributes是一个可选的字符串, 包含属性g, m, i,  
   如果 pattern 是正则表达式，而不是字符串，则必须省略该参数
```


#### 1. 正则表达式修饰符

```
i => 执行对大小写不敏感的匹配
g => 执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）
m => 执行多行匹配
```

#### 2. 正则表达式模式 - 括号


##### (1) 括号里面使用连字号, 只能表示一个字符

```
括号用于查找一定范围的字符串, 用连字号可以表示一个字符的范围, 只能表示一个字符

[A-Z] => 查找任何从大写A到大写Z的字符 即匹配所有大写字母
[a-z] => 查找任何从小写a到小写z的字符 即匹配所有小写字母
[a-zA-Z] => 匹配所有字母
[0-9] => 查找任何从0-9的数字
```

```
连字号实例

如果要匹配一个由一个小写字母和一位数字组成的字符串，比如"z2"、"t6"或"g7"， 
但不是"ab2"、"r2d3" 或"b52"

用这个模式: ^[a-z][0-9]$

尽管[a-z]代表26个字母的范围,但在这里它只能与第一个字符是小写字母的字符串匹配
[0-9]代表所有的数字, 但在这里只能与第二个字符是数字的字符串进行匹配
因为不能是"ab2"、"r2d3" 或"b52", 所以必须加限定符, ^以小写字符开头, $以数字结束
```

##### (2) 方括号里使用 ^ 时，它表示"非"或"排除"的意思，常常用来剔除某个字符

```
[^a-z] => 除了小写字母以外的所有字符
[^\"\'] => 除了双引号(")和单引号(')之外的所有字符
[^\\\/\^] => 除了(\)(/)(^)之外的所有字符
```

##### (3) 括号里面放置一个或更多单个字符, 只能表示一个字符

```
[abc] => 匹配a或b或c的字符
[3589] => 匹配是3或5或8或9的字符
```

##### (4) |替换和分组

```
(x|y) => 查找由 | 分隔的任何选项

^(13[0-9]|14[57]|15[0-9]|17[0-9]|18[0-9])\d{8}$ 

以130-139或145、147或150-159或170-179或180-180开头,  
后连续八位数字并且以数字结尾的字符 即电话号码
```

#### 3. 正则表达式模式 -  元字符

```
元字符（Metacharacter）是拥有特殊含义的字符

\d => 查找数字
\D => 查找非数字
\s => 查找空白字符
\S => 查找非空白字符
\b => 匹配单词边界
\B => 匹配非单词边界
\w => 查找单词字符
\W => 查找非单词字符
\n => 换行
\r => 回车
```

#### 4. 正则表达式模式 -  定义量词

```
n? => 匹配任何包含零个或一个 n 的字符串 【0-1】
n+ => 匹配任何包含至少一个 n 的字符串  【1+】
n* => 匹配任何包含零个或多个 n 的字符串 【0个或者多个】
n{X} => 匹配包含 X 个 n 的序列的字符串【n】
n{X,Y} => 匹配包含 X 至 Y 个 n 的序列的字符串 【X-Y】 
n{X,} => 匹配包含至少 X 个 n 的序列的字符串 【X+】
^n => 匹配任何开头为 n 的字符串
n$ => 匹配任何结尾为 n 的字符串
```

#### 5. 正则表达式使用方法 - test()

```
RegExpObject.test(str) 方法用于检测一个字符串是否匹配某个模式 返回true/false

var str = 'Visit W3School'
var reg = new RegExp('w3School', 'i') => 相当于 var reg = /w3School/i
reg.test(str)
```

#### 6. 正则表达式使用方法 - replace()

```
str.replace(RegExpObject, newStr)返回的是被替换之后的字符串

var str = 'Visit Microsoft Microsoft!'
var reg = /microsoft/i => 相当于 var reg = new RegExp('microsoft', 'i')
str.replace(reg, 'W3School')

=> 返回文本Visit W3School Microsoft! 使用replace()方法, 
只会修改找到的第一个值, 如果需要全局修改, 可以使用g修饰符, 全局替换
```


#### 7. 正则表达式使用方法 - match()

```
str.match()方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配 
存放匹配结果的数组, 未找到返回null

str.match()方法有两种方式：  
1. str.match(str)直接检索字符串值 str必须 规定要检索的字符串值
2. str.match(RegExpObject)使用正则表达式来检索 RegExpObject 正则表达式


var str = 'Hello world world'
str.match('world') => 直接检索字符串值, 返回数组['world'] 只有一个值
str.match(/world/gi)  
=> 使用正则表达式来检索, g全局搜索world并且i大小写不敏感 检索到数组['world', 'World'] 
```

#### 8. 正则表达式使用方法 - compile() 

```
RegExpObject.compile(regexp, modifier) 方法用于在脚本执行过程中编译正则表达式,  
也可用于改变和重新编译正则表达式

var str = 'Every man in the world! Every woman on earth!'
var reg = /man/g

1. str = str.replace(reg, 'person') 
=> str的值是Every person in the world! Every woperson on earth!

2. reg = reg.compile(/(wo)?man/g)
=> 改变和重新编译正则表达式

3. str = str.replace(reg, 'person')
=> 输出Every person in the world! Every person on earth!
```


#### 9. 正则表达式量词实例

```
var str = 'Hellooo World! Hello W3School!'

1. *的用法 全局搜索'l', 后跟零个或多个'o'字符 
str.match(/lo*/g) 
=> 匹配到数组['l', 'looo', 'l', 'l', 'lo', 'l'] 


2. ?的用法  全局搜索'l', 后跟零个或1个'o'字符
str.match(/lo?/g ) 
=> 匹配到数组['l', 'lo', 'l', 'l', 'lo', 'l']


3. +的用法 全局搜索'l', 后跟1个或多个'o'字符
str.match(/lo+/g) 
=> 匹配到数组['looo', 'lo']
```
